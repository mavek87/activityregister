/*
 * This file is generated by jOOQ.
 */
package com.matteoveroni.activityregister;


import com.matteoveroni.activityregister.tables.Attivita;
import com.matteoveroni.activityregister.tables.Categorie;
import com.matteoveroni.activityregister.tables.Databasechangeloglock;
import com.matteoveroni.activityregister.tables.Materie;
import com.matteoveroni.activityregister.tables.MaterieCategorie;
import com.matteoveroni.activityregister.tables.records.AttivitaRecord;
import com.matteoveroni.activityregister.tables.records.CategorieRecord;
import com.matteoveroni.activityregister.tables.records.DatabasechangeloglockRecord;
import com.matteoveroni.activityregister.tables.records.MaterieCategorieRecord;
import com.matteoveroni.activityregister.tables.records.MaterieRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * study.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AttivitaRecord> ATTIVITA_PKEY = Internal.createUniqueKey(Attivita.ATTIVITA, DSL.name("attivita_pkey"), new TableField[] { Attivita.ATTIVITA.ID_ATTIVITA }, true);
    public static final UniqueKey<CategorieRecord> CATEGORIE_PKEY = Internal.createUniqueKey(Categorie.CATEGORIE, DSL.name("categorie_pkey"), new TableField[] { Categorie.CATEGORIE.ID_CATEGORIA }, true);
    public static final UniqueKey<CategorieRecord> UNIQUE_CONSTRAINT_NOME_CATEGORIA = Internal.createUniqueKey(Categorie.CATEGORIE, DSL.name("unique_constraint_nome_categoria"), new TableField[] { Categorie.CATEGORIE.NOME_CATEGORIA }, true);
    public static final UniqueKey<DatabasechangeloglockRecord> DATABASECHANGELOGLOCK_PKEY = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, DSL.name("databasechangeloglock_pkey"), new TableField[] { Databasechangeloglock.DATABASECHANGELOGLOCK.ID }, true);
    public static final UniqueKey<MaterieRecord> MATERIE_PKEY = Internal.createUniqueKey(Materie.MATERIE, DSL.name("materie_pkey"), new TableField[] { Materie.MATERIE.ID_MATERIA }, true);
    public static final UniqueKey<MaterieCategorieRecord> MATERIE_CATEGORIE_PKEY = Internal.createUniqueKey(MaterieCategorie.MATERIE_CATEGORIE, DSL.name("materie_categorie_pkey"), new TableField[] { MaterieCategorie.MATERIE_CATEGORIE.ID_MATERIA, MaterieCategorie.MATERIE_CATEGORIE.ID_CATEGORIA }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AttivitaRecord, MaterieRecord> ATTIVITA__FK_ID_MATERIA_ATTIVITA = Internal.createForeignKey(Attivita.ATTIVITA, DSL.name("fk_id_materia_attivita"), new TableField[] { Attivita.ATTIVITA.ID_MATERIA }, Keys.MATERIE_PKEY, new TableField[] { Materie.MATERIE.ID_MATERIA }, true);
    public static final ForeignKey<MaterieCategorieRecord, CategorieRecord> MATERIE_CATEGORIE__FK_ID_CATEGORIA_MATERIE_CATEGORIE = Internal.createForeignKey(MaterieCategorie.MATERIE_CATEGORIE, DSL.name("fk_id_categoria_materie_categorie"), new TableField[] { MaterieCategorie.MATERIE_CATEGORIE.ID_CATEGORIA }, Keys.CATEGORIE_PKEY, new TableField[] { Categorie.CATEGORIE.ID_CATEGORIA }, true);
    public static final ForeignKey<MaterieCategorieRecord, MaterieRecord> MATERIE_CATEGORIE__FK_ID_MATERIA_MATERIE_CATEGORIE = Internal.createForeignKey(MaterieCategorie.MATERIE_CATEGORIE, DSL.name("fk_id_materia_materie_categorie"), new TableField[] { MaterieCategorie.MATERIE_CATEGORIE.ID_MATERIA }, Keys.MATERIE_PKEY, new TableField[] { Materie.MATERIE.ID_MATERIA }, true);
}
