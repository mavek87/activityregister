/*
 * This file is generated by jOOQ.
 */
package com.matteoveroni.activityregister.tables;


import com.matteoveroni.activityregister.Keys;
import com.matteoveroni.activityregister.Study;
import com.matteoveroni.activityregister.tables.records.MaterieRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Materie extends TableImpl<MaterieRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>study.materie</code>
     */
    public static final Materie MATERIE = new Materie();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MaterieRecord> getRecordType() {
        return MaterieRecord.class;
    }

    /**
     * The column <code>study.materie.id_materia</code>.
     */
    public final TableField<MaterieRecord, UUID> ID_MATERIA = createField(DSL.name("id_materia"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>study.materie.nome</code>.
     */
    public final TableField<MaterieRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>study.materie.descrizione</code>.
     */
    public final TableField<MaterieRecord, String> DESCRIZIONE = createField(DSL.name("descrizione"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>study.materie.studio_attivo</code>.
     */
    public final TableField<MaterieRecord, Boolean> STUDIO_ATTIVO = createField(DSL.name("studio_attivo"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private Materie(Name alias, Table<MaterieRecord> aliased) {
        this(alias, aliased, null);
    }

    private Materie(Name alias, Table<MaterieRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>study.materie</code> table reference
     */
    public Materie(String alias) {
        this(DSL.name(alias), MATERIE);
    }

    /**
     * Create an aliased <code>study.materie</code> table reference
     */
    public Materie(Name alias) {
        this(alias, MATERIE);
    }

    /**
     * Create a <code>study.materie</code> table reference
     */
    public Materie() {
        this(DSL.name("materie"), null);
    }

    public <O extends Record> Materie(Table<O> child, ForeignKey<O, MaterieRecord> key) {
        super(child, key, MATERIE);
    }

    @Override
    public Schema getSchema() {
        return Study.STUDY;
    }

    @Override
    public UniqueKey<MaterieRecord> getPrimaryKey() {
        return Keys.MATERIE_PKEY;
    }

    @Override
    public List<UniqueKey<MaterieRecord>> getKeys() {
        return Arrays.<UniqueKey<MaterieRecord>>asList(Keys.MATERIE_PKEY);
    }

    @Override
    public Materie as(String alias) {
        return new Materie(DSL.name(alias), this);
    }

    @Override
    public Materie as(Name alias) {
        return new Materie(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Materie rename(String name) {
        return new Materie(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Materie rename(Name name) {
        return new Materie(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
