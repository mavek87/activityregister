/*
 * This file is generated by jOOQ.
 */
package com.matteoveroni.activityregister.tables;


import com.matteoveroni.activityregister.Keys;
import com.matteoveroni.activityregister.Study;
import com.matteoveroni.activityregister.tables.records.AttivitaRecord;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Attivita extends TableImpl<AttivitaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>study.attivita</code>
     */
    public static final Attivita ATTIVITA = new Attivita();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AttivitaRecord> getRecordType() {
        return AttivitaRecord.class;
    }

    /**
     * The column <code>study.attivita.id_attivita</code>.
     */
    public final TableField<AttivitaRecord, UUID> ID_ATTIVITA = createField(DSL.name("id_attivita"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>study.attivita.id_materia</code>.
     */
    public final TableField<AttivitaRecord, UUID> ID_MATERIA = createField(DSL.name("id_materia"), SQLDataType.UUID, this, "");

    /**
     * The column <code>study.attivita.descrizione</code>.
     */
    public final TableField<AttivitaRecord, String> DESCRIZIONE = createField(DSL.name("descrizione"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>study.attivita.data</code>.
     */
    public final TableField<AttivitaRecord, LocalDateTime> DATA = createField(DSL.name("data"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>study.attivita.inizio_attivita</code>.
     */
    public final TableField<AttivitaRecord, LocalTime> INIZIO_ATTIVITA = createField(DSL.name("inizio_attivita"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>study.attivita.fine_attivita</code>.
     */
    public final TableField<AttivitaRecord, LocalTime> FINE_ATTIVITA = createField(DSL.name("fine_attivita"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>study.attivita.durata_attivita</code>.
     */
    public final TableField<AttivitaRecord, Long> DURATA_ATTIVITA = createField(DSL.name("durata_attivita"), SQLDataType.BIGINT, this, "");

    private Attivita(Name alias, Table<AttivitaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Attivita(Name alias, Table<AttivitaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>study.attivita</code> table reference
     */
    public Attivita(String alias) {
        this(DSL.name(alias), ATTIVITA);
    }

    /**
     * Create an aliased <code>study.attivita</code> table reference
     */
    public Attivita(Name alias) {
        this(alias, ATTIVITA);
    }

    /**
     * Create a <code>study.attivita</code> table reference
     */
    public Attivita() {
        this(DSL.name("attivita"), null);
    }

    public <O extends Record> Attivita(Table<O> child, ForeignKey<O, AttivitaRecord> key) {
        super(child, key, ATTIVITA);
    }

    @Override
    public Schema getSchema() {
        return Study.STUDY;
    }

    @Override
    public UniqueKey<AttivitaRecord> getPrimaryKey() {
        return Keys.ATTIVITA_PKEY;
    }

    @Override
    public List<UniqueKey<AttivitaRecord>> getKeys() {
        return Arrays.<UniqueKey<AttivitaRecord>>asList(Keys.ATTIVITA_PKEY);
    }

    @Override
    public List<ForeignKey<AttivitaRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AttivitaRecord, ?>>asList(Keys.ATTIVITA__FK_ID_MATERIA_ATTIVITA);
    }

    public Materie materie() {
        return new Materie(this, Keys.ATTIVITA__FK_ID_MATERIA_ATTIVITA);
    }

    @Override
    public List<Check<AttivitaRecord>> getChecks() {
        return Arrays.<Check<AttivitaRecord>>asList(
              Internal.createCheck(this, DSL.name("check_fine_attivita_greater_than_inizio_attivita"), "((fine_attivita > inizio_attivita))", true)
        );
    }

    @Override
    public Attivita as(String alias) {
        return new Attivita(DSL.name(alias), this);
    }

    @Override
    public Attivita as(Name alias) {
        return new Attivita(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Attivita rename(String name) {
        return new Attivita(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Attivita rename(Name name) {
        return new Attivita(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, String, LocalDateTime, LocalTime, LocalTime, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
